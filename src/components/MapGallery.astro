---
// Reused component from my other app
import type { GetStaticPaths } from 'astro';
import { getI18N } from '../i18n';
import { Image } from 'astro:assets';
import { mapImages } from '../utils/images';

interface Props {
    currentLocale?: string;
}

const { currentLocale = 'en' } = Astro.props;
const i18n = getI18N({ currentLocale });

const maps = i18n.SECTION_PR.MAPS.map((map: any) => ({
    title: map.title,
    description: map.description,
    techs: map.technologies || [],
    image: mapImages[map.url] || map.url,
}));
---

<div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 p-4">
    {
        maps.map(({ title, image }) => (
            <div class="relative group">
                <Image src={image} alt={title} width={400} height={300} class="w-full h-48 object-cover rounded-lg transition-all duration-300 group-hover:scale-105" />
                <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-50 transition-all duration-300 rounded-lg flex items-center justify-center">
                    <p class="text-white text-center opacity-0 group-hover:opacity-100 transition-opacity duration-300 p-2">{title}</p>
                </div>
            </div>
        ))
    }
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const modal = createModal();
        const modalContent = createModalContent(modal);
        attachEventListeners(modal, modalContent);
    });

    function createModal() {
        const modal = document.createElement('div');
        Object.assign(modal.style, {
            display: 'none',
            position: 'fixed',
            zIndex: '1000',
            left: '0',
            top: '0',
            width: '100%',
            height: '100%',
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
            alignItems: 'center',
            justifyContent: 'center',
        });
        document.body.appendChild(modal);
        return modal;
    }

    function createModalContent(modal: any) {
        const modalContent = document.createElement('img');
        Object.assign(modalContent.style, {
            maxWidth: '80%',
            maxHeight: '80%',
        });
        modal.appendChild(modalContent);
        return modalContent;
    }

    function attachEventListeners(modal: HTMLElement, modalContent: HTMLImageElement): void {
        document.querySelectorAll('.map-item img').forEach((element) => {
            const img = element as HTMLImageElement;
            img.addEventListener('click', () => {
                modalContent.src = img.src;
                modal.style.display = 'flex';
            });
        });

        modal.addEventListener('click', () => {
            modal.style.display = 'none';
        });
    }
</script>

<style>
    ul {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-inline: -16px;
    }

    article {
        border-radius: 8px;
        border: 1px solid #f2f2f2;
        gap: 16px;
        display: flex;
        flex-direction: column;
        padding: 16px;
        height: 100%;
    }

    article header {
        flex: 1;
    }

    article h3 {
        margin-bottom: 4px;
    }

    article a {
        color: var(--main-1);
    }

    article a:hover {
        text-decoration: underline;
        color: var(--contrast-1);
    }

    article p {
        font-size: 0.75rem;
        line-height: 1.2rem;
        margin-bottom: 4px;
    }

    article h3 span {
        color: rgb(0, 188, 47);
    }

    footer {
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
        font-size: 0.6rem;
    }

    footer span {
        border-radius: 6px;
        background-color: var(--main-4);
        color: var(--main-1);
        font-size: 0.6rem;
        font-weight: 500;
        padding: 0.2rem 0.6rem;
    }

    .github-code-link {
        margin-left: 5px;
    }

    .map-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
        gap: 1rem;
        z-index: 1000;
    }

    .map-item {
        position: relative;
        cursor: pointer;
    }

    .map-item img {
        width: 100%;
        height: auto;
        transition: filter 0.3s ease;
    }

    .map-item h4 {
        color: var(--base-1);
    }

    .map-item:hover img {
        filter: grayscale(0);
    }

    .map-info {
        position: absolute;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        color: #fff;
        width: 100%;
        padding: 3px;
        display: none;
        font-size: 0.6rem;
    }

    .map-item:hover .map-info {
        display: block;
    }

    @media (width <= 700px) {
        ul {
            margin-inline: 0px;
        }

        article {
            box-shadow: 0 1px 1px #f2f2f2;
            padding: 5px 5px 10px 10px;
        }

        .map-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));
            gap: 1rem;
        }

        .map-item {
            position: relative;
            height: auto;
        }

        .map-item img {
            width: 100%;
            height: auto;
        }

        .map-info {
            display: none !important;
        }
    }
</style>
